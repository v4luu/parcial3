{"filter":false,"title":"test_main.py","tooltip":"/test_main.py","undoManager":{"mark":16,"position":16,"stack":[[{"start":{"row":0,"column":0},"end":{"row":46,"column":47},"action":"insert","lines":["import pytest","from unittest.mock import Mock, call","import datetime","from Lambda import download_headlines  # Ajusta esto al nombre del archivo","","def test_download_headlines_success(mocker):","    # Mock response de requests","    mock_response = Mock()","    mock_response.status_code = 200","    mock_response.text = \"contenido html de prueba\"","    ","    mocker.patch('requests.get', return_value=mock_response)","    ","    # Mock boto3 client y su método upload_file","    mock_s3_client = mocker.patch('boto3.client')","    ","    # Mock datetime para fijar fecha","    mock_datetime = mocker.patch('datetime.datetime')","    mock_datetime.now.return_value.strftime.return_value = \"2025-06-03\"","    ","    download_headlines()","    ","    s3_instance = mock_s3_client.return_value","    ","    expected_calls = [","        call.upload_file(","            f\"/tmp/{site}-contenido-2025-06-03.html\",","            \"eltiempop\",","            f\"headlines/raw/{site}-contenido-2025-06-03.html\"","        ) for site in [\"eltiempo\", \"publimetro\"]","    ]","    ","    for expected_call in expected_calls:","        assert expected_call in s3_instance.upload_file.mock_calls","","def test_download_headlines_http_error(mocker):","    # Simula un error HTTP 404","    mock_response = Mock()","    mock_response.status_code = 404","    ","    mocker.patch('requests.get', return_value=mock_response)","    mock_s3_client = mocker.patch('boto3.client')","    ","    download_headlines()","    ","    s3_instance = mock_s3_client.return_value","    s3_instance.upload_file.assert_not_called()"],"id":1}],[{"start":{"row":3,"column":19},"end":{"row":3,"column":37},"action":"remove","lines":["download_headlines"],"id":2},{"start":{"row":3,"column":19},"end":{"row":3,"column":33},"action":"insert","lines":["lambda_handler"]}],[{"start":{"row":3,"column":11},"end":{"row":3,"column":12},"action":"insert","lines":["1"],"id":3}],[{"start":{"row":3,"column":11},"end":{"row":3,"column":12},"action":"remove","lines":["1"],"id":4},{"start":{"row":3,"column":10},"end":{"row":3,"column":11},"action":"remove","lines":["a"]},{"start":{"row":3,"column":9},"end":{"row":3,"column":10},"action":"remove","lines":["d"]},{"start":{"row":3,"column":8},"end":{"row":3,"column":9},"action":"remove","lines":["b"]},{"start":{"row":3,"column":7},"end":{"row":3,"column":8},"action":"remove","lines":["m"]},{"start":{"row":3,"column":6},"end":{"row":3,"column":7},"action":"remove","lines":["a"]},{"start":{"row":3,"column":5},"end":{"row":3,"column":6},"action":"remove","lines":["L"]}],[{"start":{"row":3,"column":5},"end":{"row":3,"column":6},"action":"insert","lines":["o"],"id":5}],[{"start":{"row":3,"column":5},"end":{"row":3,"column":6},"action":"remove","lines":["o"],"id":6}],[{"start":{"row":3,"column":5},"end":{"row":3,"column":6},"action":"insert","lines":["p"],"id":7},{"start":{"row":3,"column":6},"end":{"row":3,"column":7},"action":"insert","lines":["a"]},{"start":{"row":3,"column":7},"end":{"row":3,"column":8},"action":"insert","lines":["r"]},{"start":{"row":3,"column":8},"end":{"row":3,"column":9},"action":"insert","lines":["c"]},{"start":{"row":3,"column":9},"end":{"row":3,"column":10},"action":"insert","lines":["i"]},{"start":{"row":3,"column":10},"end":{"row":3,"column":11},"action":"insert","lines":["a"]},{"start":{"row":3,"column":11},"end":{"row":3,"column":12},"action":"insert","lines":["l"]}],[{"start":{"row":5,"column":9},"end":{"row":5,"column":35},"action":"remove","lines":["download_headlines_success"],"id":8},{"start":{"row":5,"column":9},"end":{"row":5,"column":23},"action":"insert","lines":["lambda_handler"]}],[{"start":{"row":20,"column":4},"end":{"row":20,"column":22},"action":"remove","lines":["download_headlines"],"id":9},{"start":{"row":20,"column":4},"end":{"row":20,"column":18},"action":"insert","lines":["lambda_handler"]}],[{"start":{"row":35,"column":9},"end":{"row":35,"column":27},"action":"remove","lines":["download_headlines"],"id":10},{"start":{"row":35,"column":9},"end":{"row":35,"column":23},"action":"insert","lines":["lambda_handler"]}],[{"start":{"row":43,"column":4},"end":{"row":43,"column":22},"action":"remove","lines":["download_headlines"],"id":11},{"start":{"row":43,"column":4},"end":{"row":43,"column":18},"action":"insert","lines":["lambda_handler"]}],[{"start":{"row":3,"column":5},"end":{"row":3,"column":12},"action":"remove","lines":["parcial"],"id":12},{"start":{"row":3,"column":5},"end":{"row":3,"column":20},"action":"insert","lines":["lambda1.parcial"]}],[{"start":{"row":20,"column":19},"end":{"row":20,"column":33},"action":"insert","lines":["event, context"],"id":13}],[{"start":{"row":43,"column":19},"end":{"row":43,"column":33},"action":"insert","lines":["event, context"],"id":14}],[{"start":{"row":0,"column":0},"end":{"row":46,"column":47},"action":"remove","lines":["import pytest","from unittest.mock import Mock, call","import datetime","from lambda1.parcial import lambda_handler  # Ajusta esto al nombre del archivo","","def test_lambda_handler(mocker):","    # Mock response de requests","    mock_response = Mock()","    mock_response.status_code = 200","    mock_response.text = \"contenido html de prueba\"","    ","    mocker.patch('requests.get', return_value=mock_response)","    ","    # Mock boto3 client y su método upload_file","    mock_s3_client = mocker.patch('boto3.client')","    ","    # Mock datetime para fijar fecha","    mock_datetime = mocker.patch('datetime.datetime')","    mock_datetime.now.return_value.strftime.return_value = \"2025-06-03\"","    ","    lambda_handler(event, context)","    ","    s3_instance = mock_s3_client.return_value","    ","    expected_calls = [","        call.upload_file(","            f\"/tmp/{site}-contenido-2025-06-03.html\",","            \"eltiempop\",","            f\"headlines/raw/{site}-contenido-2025-06-03.html\"","        ) for site in [\"eltiempo\", \"publimetro\"]","    ]","    ","    for expected_call in expected_calls:","        assert expected_call in s3_instance.upload_file.mock_calls","","def test_lambda_handler_http_error(mocker):","    # Simula un error HTTP 404","    mock_response = Mock()","    mock_response.status_code = 404","    ","    mocker.patch('requests.get', return_value=mock_response)","    mock_s3_client = mocker.patch('boto3.client')","    ","    lambda_handler(event, context)","    ","    s3_instance = mock_s3_client.return_value","    s3_instance.upload_file.assert_not_called()"],"id":16},{"start":{"row":0,"column":0},"end":{"row":33,"column":0},"action":"insert","lines":["from lambda1.parcial import lambda_handler","from unittest.mock import Mock","import pytest","","def test_lambda_handler(mocker):","    # Mock del resultado de requests.get","    mock_response = Mock()","    mock_response.status_code = 200","    mock_response.text = \"contenido html de prueba\"","    mocker.patch('requests.get', return_value=mock_response)","","    # Mock del cliente de boto3","    mock_s3_client = mocker.patch('boto3.client')","","    # Mock de datetime","    mock_datetime = mocker.patch('lambda1.parcial.datetime')  # Asegúrate de parchar el módulo donde se usa","    mock_datetime.now.return_value.strftime.return_value = \"2025-06-03\"","","    # Ejecutar función con mocks de event y context","    event = {}","    context = {}","    lambda_handler(event, context)","","def test_lambda_handler_http_error(mocker):","    # Simula un error HTTP 404","    mock_response = Mock()","    mock_response.status_code = 404","    mocker.patch('requests.get', return_value=mock_response)","    mock_s3_client = mocker.patch('boto3.client')","","    event = {}","    context = {}","    lambda_handler(event, context)",""]}],[{"start":{"row":2,"column":13},"end":{"row":3,"column":0},"action":"insert","lines":["",""],"id":17},{"start":{"row":3,"column":0},"end":{"row":3,"column":1},"action":"insert","lines":["i"]},{"start":{"row":3,"column":1},"end":{"row":3,"column":2},"action":"insert","lines":["m"]},{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"insert","lines":["p"]},{"start":{"row":3,"column":3},"end":{"row":3,"column":4},"action":"insert","lines":["o"]},{"start":{"row":3,"column":4},"end":{"row":3,"column":5},"action":"insert","lines":["r"]},{"start":{"row":3,"column":5},"end":{"row":3,"column":6},"action":"insert","lines":["t"]}],[{"start":{"row":3,"column":6},"end":{"row":3,"column":7},"action":"insert","lines":[" "],"id":18},{"start":{"row":3,"column":7},"end":{"row":3,"column":8},"action":"insert","lines":["d"]},{"start":{"row":3,"column":8},"end":{"row":3,"column":9},"action":"insert","lines":["a"]},{"start":{"row":3,"column":9},"end":{"row":3,"column":10},"action":"insert","lines":["t"]},{"start":{"row":3,"column":10},"end":{"row":3,"column":11},"action":"insert","lines":["e"]},{"start":{"row":3,"column":11},"end":{"row":3,"column":12},"action":"insert","lines":["t"]},{"start":{"row":3,"column":12},"end":{"row":3,"column":13},"action":"insert","lines":["i"]},{"start":{"row":3,"column":13},"end":{"row":3,"column":14},"action":"insert","lines":["m"]},{"start":{"row":3,"column":14},"end":{"row":3,"column":15},"action":"insert","lines":["e"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":3,"column":15},"end":{"row":3,"column":15},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1748966833659,"hash":"6d84a88981eacd1a835516c0337e91a1069d2209"}